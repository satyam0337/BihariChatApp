"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBundlerName = exports.getBundler = void 0;
const path_1 = require("path");
const detect_es_module_js_1 = require("../utils/detect_es_module.js");
const index_js_1 = __importDefault(require("./esbuild/index.js"));
const index_js_2 = __importDefault(require("./nft/index.js"));
const index_js_3 = __importDefault(require("./none/index.js"));
const index_js_4 = __importDefault(require("./zisi/index.js"));
const getBundler = (name) => {
    switch (name) {
        case "esbuild" /* NodeBundlerType.ESBUILD */:
        case "esbuild_zisi" /* NodeBundlerType.ESBUILD_ZISI */:
            return index_js_1.default;
        case "nft" /* NodeBundlerType.NFT */:
            return index_js_2.default;
        case "zisi" /* NodeBundlerType.ZISI */:
            return index_js_4.default;
        case "none" /* NodeBundlerType.NONE */:
            return index_js_3.default;
        default:
            throw new Error(`Unsupported Node bundler: ${name}`);
    }
};
exports.getBundler = getBundler;
const getBundlerName = async ({ config: { nodeBundler }, extension, featureFlags, mainFile, }) => {
    if (nodeBundler) {
        return nodeBundler;
    }
    return await getDefaultBundler({ extension, featureFlags, mainFile });
};
exports.getBundlerName = getBundlerName;
const ESBUILD_EXTENSIONS = new Set(['.mjs', '.ts', '.tsx', '.cts', '.mts']);
// We use ZISI as the default bundler, except for certain extensions, for which
// esbuild is the only option.
const getDefaultBundler = async ({ extension, featureFlags, mainFile, }) => {
    if (extension === ".mjs" /* ModuleFileExtension.MJS */ && featureFlags.zisi_pure_esm_mjs) {
        return "nft" /* NodeBundlerType.NFT */;
    }
    if (ESBUILD_EXTENSIONS.has(extension)) {
        return "esbuild" /* NodeBundlerType.ESBUILD */;
    }
    if (featureFlags.traceWithNft) {
        return "nft" /* NodeBundlerType.NFT */;
    }
    const functionIsESM = (0, path_1.extname)(mainFile) !== ".cjs" /* ModuleFileExtension.CJS */ && (await (0, detect_es_module_js_1.detectEsModule)({ mainFile }));
    return functionIsESM ? "nft" /* NodeBundlerType.NFT */ : "zisi" /* NodeBundlerType.ZISI */;
};
//# sourceMappingURL=index.js.map