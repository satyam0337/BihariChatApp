export const getDeclarationsFromConfig = (tomlDeclarations, functionsConfig, deployConfig) => {
    var _a;
    const declarations = [];
    const functionsVisited = new Set();
    // We start by iterating over all the declarations in the TOML file and in
    // the deploy configuration file. For any declaration for which we also have
    // a function configuration object, we replace the path because that object
    // takes precedence.
    for (const declaration of [...tomlDeclarations, ...deployConfig.declarations]) {
        const config = (_a = functionsConfig[declaration.function]) !== null && _a !== void 0 ? _a : {};
        functionsVisited.add(declaration.function);
        declarations.push({ ...declaration, ...config });
    }
    // Finally, we must create declarations for functions that are not declared
    // in the TOML at all.
    for (const name in functionsConfig) {
        const { path, ...config } = functionsConfig[name];
        if (!functionsVisited.has(name) && path) {
            declarations.push({ ...config, function: name, path });
        }
    }
    return declarations;
};
